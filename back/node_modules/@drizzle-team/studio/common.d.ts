import { SQL, TablesRelationalConfig } from "drizzle-orm";
export type FilterOp = [string, string, any];
export type Filter = {
    and?: Filter[];
    or?: Filter[];
    op?: FilterOp;
};
export declare function filtersToSQL(filters: Filter): SQL | undefined;
export declare const convertToTsColumns: (data: Record<string, any>, columnNamesMap: Record<string, {
    name: string;
    mapper: (str: string) => any;
}>) => {
    [k: string]: any;
};
export declare const extractRelations: (tablesConfig: {
    tables: TablesRelationalConfig;
    tableNamesMap: Record<string, string>;
}) => {
    name: string;
    table: string;
    schema: string;
    colmns: string[];
    refTable: string;
    refSchema: string;
    refColumns: string[];
}[];
export type QueryParams = {
    table: string;
    columns: string[] | undefined;
    where: Filter | undefined;
    orderBy: {
        column: string;
        type: "ASC" | "DESC";
    } | undefined;
    limit: number;
    offset: number;
};
export type InsertParams = {
    table: string;
    data: Record<string, any>;
};
export type UpdateParams = {
    table: string;
    data: Record<string, any>;
    where: Filter;
};
export type DeleteParams = {
    table: string;
    where: Filter;
};
export type DropTableParams = {
    table: string;
    isCascade?: boolean;
};
export type TruncateParams = {
    table: string;
    isCascade?: boolean;
};
export type Table = {
    name: string;
    columns: {
        name: string;
        type: string;
        _type: string;
    }[];
    count?: number;
    primaryKeys: string[];
};
export type ProxyParams = {
    sql: string;
    method: "all";
    params: any[];
};
export type QueryEngine = {
    dialect: "sqlite" | "mysql" | "pg";
    proxy: (params: ProxyParams) => Promise<any[]>;
    raw: (query: string) => Promise<any[][]>;
    select: (schema: string) => (params: QueryParams) => Promise<any[]>;
    insert: (schema: string) => (params: InsertParams) => Promise<any>;
    update: (schema: string) => (params: UpdateParams) => Promise<any>;
    delete: (schema: string) => (params: DeleteParams) => Promise<any>;
    dropTable: (schema: string) => (params: DropTableParams) => Promise<any>;
    truncate: (Schema: string) => (params: TruncateParams) => Promise<any>;
    tables: (schema: string, options?: {
        withoutCount?: boolean;
    }) => Promise<Table[]>;
    schemas: string[];
    relations: {
        name: string;
        table: string;
        schema: string;
        colmns: string[];
        refTable: string;
        refSchema: string;
        refColumns: string[];
    }[];
    ts: {
        imports: string;
        declarations: string;
        schemaEntry: string;
    };
};
