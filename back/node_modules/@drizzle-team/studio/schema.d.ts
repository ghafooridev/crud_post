import { BaseSchema } from "valibot";
type FilterOp = [string, string, any];
type FilterType = {
    and?: FilterType[];
    or?: FilterType[];
    op?: FilterOp;
};
export declare const schema: import("valibot").UnionSchema<[import("valibot").ObjectSchema<{
    type: import("valibot").LiteralSchema<"init", "init">;
}, {
    type: "init";
}>, import("valibot").ObjectSchema<{
    type: import("valibot").LiteralSchema<"proxy", "proxy">;
    data: import("valibot").ObjectSchema<{
        sql: import("valibot").StringSchema<string>;
        method: import("valibot").EnumSchema<["all"], "all">;
        params: import("valibot").ArraySchema<import("valibot").AnySchema<any>, any[]>;
    }, {
        sql: string;
        method: "all";
        params: any[];
    }>;
}, {
    data: {
        sql: string;
        method: "all";
        params: any[];
    };
    type: "proxy";
}>, import("valibot").ObjectSchema<{
    type: import("valibot").LiteralSchema<"raw-sql", "raw-sql">;
    data: import("valibot").StringSchema<string>;
}, {
    data: string;
    type: "raw-sql";
}>, import("valibot").ObjectSchema<{
    type: import("valibot").LiteralSchema<"sql-schema", "sql-schema">;
    schema: import("valibot").OptionalSchema<import("valibot").StringSchema<string>, "public", string>;
    data: import("valibot").OptionalSchema<import("valibot").ObjectSchema<{
        count: import("valibot").BooleanSchema<boolean>;
    }, {
        count: boolean;
    }>, undefined, {
        count: boolean;
    } | undefined>;
}, {
    schema: string;
    type: "sql-schema";
    data?: {
        count: boolean;
    } | undefined;
}>, import("valibot").ObjectSchema<{
    type: import("valibot").EnumSchema<["sql-insert"], "sql-insert">;
    schema: import("valibot").OptionalSchema<import("valibot").StringSchema<string>, "public", string>;
    data: import("valibot").ObjectSchema<{
        table: import("valibot").StringSchema<string>;
        data: import("valibot").RecordSchema<import("valibot").StringSchema<string>, import("valibot").AnySchema<any>, {
            [x: string]: any;
        }>;
    }, {
        data: {
            [x: string]: any;
        };
        table: string;
    }>;
}, {
    data: {
        data: {
            [x: string]: any;
        };
        table: string;
    };
    schema: string;
    type: "sql-insert";
}>, import("valibot").ObjectSchema<{
    type: import("valibot").EnumSchema<["sql-select"], "sql-select">;
    schema: import("valibot").OptionalSchema<import("valibot").StringSchema<string>, "public", string>;
    data: import("valibot").ObjectSchema<{
        table: import("valibot").StringSchema<string>;
        columns: import("valibot").OptionalSchema<import("valibot").ArraySchema<import("valibot").StringSchema<string>, string[]>, undefined, string[] | undefined>;
        where: import("valibot").OptionalSchema<BaseSchema<FilterType>, undefined, FilterType | undefined>;
        orderBy: import("valibot").OptionalSchema<import("valibot").ObjectSchema<{
            column: import("valibot").StringSchema<string>;
            type: import("valibot").EnumSchema<["ASC", "DESC"], "ASC" | "DESC">;
        }, {
            type: "ASC" | "DESC";
            column: string;
        }>, undefined, {
            type: "ASC" | "DESC";
            column: string;
        } | undefined>;
        limit: import("valibot").NumberSchema<number>;
        offset: import("valibot").NumberSchema<number>;
    }, {
        table: string;
        limit: number;
        offset: number;
        columns?: string[] | undefined;
        where?: FilterType | undefined;
        orderBy?: {
            type: "ASC" | "DESC";
            column: string;
        } | undefined;
    }>;
}, {
    data: {
        table: string;
        limit: number;
        offset: number;
        columns?: string[] | undefined;
        where?: FilterType | undefined;
        orderBy?: {
            type: "ASC" | "DESC";
            column: string;
        } | undefined;
    };
    schema: string;
    type: "sql-select";
}>, import("valibot").ObjectSchema<{
    type: import("valibot").EnumSchema<["sql-update"], "sql-update">;
    schema: import("valibot").OptionalSchema<import("valibot").StringSchema<string>, "public", string>;
    data: import("valibot").ObjectSchema<{
        table: import("valibot").StringSchema<string>;
        where: BaseSchema<FilterType>;
        data: import("valibot").RecordSchema<import("valibot").StringSchema<string>, import("valibot").AnySchema<any>, {
            [x: string]: any;
        }>;
    }, {
        data: {
            [x: string]: any;
        };
        where: FilterType;
        table: string;
    }>;
}, {
    data: {
        data: {
            [x: string]: any;
        };
        where: FilterType;
        table: string;
    };
    schema: string;
    type: "sql-update";
}>, import("valibot").ObjectSchema<{
    type: import("valibot").EnumSchema<["sql-delete"], "sql-delete">;
    schema: import("valibot").OptionalSchema<import("valibot").StringSchema<string>, "public", string>;
    data: import("valibot").ObjectSchema<{
        table: import("valibot").StringSchema<string>;
        where: BaseSchema<FilterType>;
    }, {
        where: FilterType;
        table: string;
    }>;
}, {
    data: {
        where: FilterType;
        table: string;
    };
    schema: string;
    type: "sql-delete";
}>, import("valibot").ObjectSchema<{
    type: import("valibot").EnumSchema<["sql-truncate"], "sql-truncate">;
    schema: import("valibot").OptionalSchema<import("valibot").StringSchema<string>, "public", string>;
    data: import("valibot").ObjectSchema<{
        table: import("valibot").StringSchema<string>;
        isCascade: import("valibot").OptionalSchema<import("valibot").BooleanSchema<boolean>, undefined, boolean | undefined>;
    }, {
        table: string;
        isCascade?: boolean | undefined;
    }>;
}, {
    data: {
        table: string;
        isCascade?: boolean | undefined;
    };
    schema: string;
    type: "sql-truncate";
}>, import("valibot").ObjectSchema<{
    type: import("valibot").EnumSchema<["sql-drop"], "sql-drop">;
    schema: import("valibot").OptionalSchema<import("valibot").StringSchema<string>, "public", string>;
    data: import("valibot").ObjectSchema<{
        table: import("valibot").StringSchema<string>;
        isCascade: import("valibot").OptionalSchema<import("valibot").BooleanSchema<boolean>, undefined, boolean | undefined>;
    }, {
        table: string;
        isCascade?: boolean | undefined;
    }>;
}, {
    data: {
        table: string;
        isCascade?: boolean | undefined;
    };
    schema: string;
    type: "sql-drop";
}>], {
    type: "init";
} | {
    data: {
        sql: string;
        method: "all";
        params: any[];
    };
    type: "proxy";
} | {
    data: string;
    type: "raw-sql";
} | {
    schema: string;
    type: "sql-schema";
    data?: {
        count: boolean;
    } | undefined;
} | {
    data: {
        data: {
            [x: string]: any;
        };
        table: string;
    };
    schema: string;
    type: "sql-insert";
} | {
    data: {
        table: string;
        limit: number;
        offset: number;
        columns?: string[] | undefined;
        where?: FilterType | undefined;
        orderBy?: {
            type: "ASC" | "DESC";
            column: string;
        } | undefined;
    };
    schema: string;
    type: "sql-select";
} | {
    data: {
        data: {
            [x: string]: any;
        };
        where: FilterType;
        table: string;
    };
    schema: string;
    type: "sql-update";
} | {
    data: {
        where: FilterType;
        table: string;
    };
    schema: string;
    type: "sql-delete";
} | {
    data: {
        table: string;
        isCascade?: boolean | undefined;
    };
    schema: string;
    type: "sql-truncate";
} | {
    data: {
        table: string;
        isCascade?: boolean | undefined;
    };
    schema: string;
    type: "sql-drop";
}>;
export {};
