import { TypeOf } from "zod";
import { SQLiteCliConfig } from "../commands/sqliteUtils";
export declare const sqliteConnectionCli: import("zod").ZodUnion<[import("zod").ZodObject<{
    driver: import("zod").ZodLiteral<"turso">;
    url: import("zod").ZodString;
    authToken: import("zod").ZodString;
}, "strip", import("zod").ZodTypeAny, {
    url: string;
    driver: "turso";
    authToken: string;
}, {
    url: string;
    driver: "turso";
    authToken: string;
}>, import("zod").ZodObject<{
    driver: import("zod").ZodLiteral<"better-sqlite">;
    url: import("zod").ZodString;
}, "strip", import("zod").ZodTypeAny, {
    url: string;
    driver: "better-sqlite";
}, {
    url: string;
    driver: "better-sqlite";
}>, import("zod").ZodObject<{
    driver: import("zod").ZodLiteral<"libsql">;
    url: import("zod").ZodString;
}, "strip", import("zod").ZodTypeAny, {
    url: string;
    driver: "libsql";
}, {
    url: string;
    driver: "libsql";
}>]>;
export declare const sqliteCliIntrospectParams: import("zod").ZodIntersection<import("zod").ZodObject<{
    schema: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodArray<import("zod").ZodString, "many">]>>;
    out: import("zod").ZodDefault<import("zod").ZodOptional<import("zod").ZodString>>;
    breakpoints: import("zod").ZodDefault<import("zod").ZodBoolean>;
    tablesFilter: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodArray<import("zod").ZodString, "many">]>>;
    schemaFilter: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodArray<import("zod").ZodString, "many">]>>;
    introspectCasing: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodLiteral<"camel">, import("zod").ZodLiteral<"preserve">]>>;
}, "strip", import("zod").ZodTypeAny, {
    schema?: string | string[] | undefined;
    tablesFilter?: string | string[] | undefined;
    out: string;
    breakpoints: boolean;
    schemaFilter: string | string[];
    introspectCasing: "camel" | "preserve";
}, {
    schema?: string | string[] | undefined;
    out?: string | undefined;
    breakpoints?: boolean | undefined;
    tablesFilter?: string | string[] | undefined;
    schemaFilter?: string | string[] | undefined;
    introspectCasing?: "camel" | "preserve" | undefined;
}>, import("zod").ZodUnion<[import("zod").ZodObject<{
    driver: import("zod").ZodLiteral<"turso">;
    url: import("zod").ZodString;
    authToken: import("zod").ZodString;
}, "strip", import("zod").ZodTypeAny, {
    url: string;
    driver: "turso";
    authToken: string;
}, {
    url: string;
    driver: "turso";
    authToken: string;
}>, import("zod").ZodObject<{
    driver: import("zod").ZodLiteral<"better-sqlite">;
    url: import("zod").ZodString;
}, "strip", import("zod").ZodTypeAny, {
    url: string;
    driver: "better-sqlite";
}, {
    url: string;
    driver: "better-sqlite";
}>, import("zod").ZodObject<{
    driver: import("zod").ZodLiteral<"libsql">;
    url: import("zod").ZodString;
}, "strip", import("zod").ZodTypeAny, {
    url: string;
    driver: "libsql";
}, {
    url: string;
    driver: "libsql";
}>]>>;
export declare const sqliteCliPushParams: import("zod").ZodIntersection<import("zod").ZodObject<{
    schema: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodArray<import("zod").ZodString, "many">]>;
    tablesFilter: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodArray<import("zod").ZodString, "many">]>>;
    schemaFilter: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodArray<import("zod").ZodString, "many">]>>;
    verbose: import("zod").ZodDefault<import("zod").ZodBoolean>;
    strict: import("zod").ZodDefault<import("zod").ZodBoolean>;
}, "strip", import("zod").ZodTypeAny, {
    tablesFilter?: string | string[] | undefined;
    strict: boolean;
    schema: string | string[];
    schemaFilter: string | string[];
    verbose: boolean;
}, {
    strict?: boolean | undefined;
    tablesFilter?: string | string[] | undefined;
    schemaFilter?: string | string[] | undefined;
    verbose?: boolean | undefined;
    schema: string | string[];
}>, import("zod").ZodUnion<[import("zod").ZodObject<{
    driver: import("zod").ZodLiteral<"turso">;
    url: import("zod").ZodString;
    authToken: import("zod").ZodString;
}, "strip", import("zod").ZodTypeAny, {
    url: string;
    driver: "turso";
    authToken: string;
}, {
    url: string;
    driver: "turso";
    authToken: string;
}>, import("zod").ZodObject<{
    driver: import("zod").ZodLiteral<"better-sqlite">;
    url: import("zod").ZodString;
}, "strip", import("zod").ZodTypeAny, {
    url: string;
    driver: "better-sqlite";
}, {
    url: string;
    driver: "better-sqlite";
}>, import("zod").ZodObject<{
    driver: import("zod").ZodLiteral<"libsql">;
    url: import("zod").ZodString;
}, "strip", import("zod").ZodTypeAny, {
    url: string;
    driver: "libsql";
}, {
    url: string;
    driver: "libsql";
}>]>>;
export declare const sqliteConfigPushParams: import("zod").ZodIntersection<import("zod").ZodObject<{
    schema: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodArray<import("zod").ZodString, "many">]>;
    tablesFilter: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodArray<import("zod").ZodString, "many">]>>;
    schemaFilter: import("zod").ZodDefault<import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodArray<import("zod").ZodString, "many">]>>;
    verbose: import("zod").ZodDefault<import("zod").ZodBoolean>;
    strict: import("zod").ZodDefault<import("zod").ZodBoolean>;
}, "strip", import("zod").ZodTypeAny, {
    tablesFilter?: string | string[] | undefined;
    strict: boolean;
    schema: string | string[];
    schemaFilter: string | string[];
    verbose: boolean;
}, {
    strict?: boolean | undefined;
    tablesFilter?: string | string[] | undefined;
    schemaFilter?: string | string[] | undefined;
    verbose?: boolean | undefined;
    schema: string | string[];
}>, import("zod").ZodUnion<[import("zod").ZodObject<{
    driver: import("zod").ZodLiteral<"turso">;
    dbCredentials: import("zod").ZodObject<{
        url: import("zod").ZodString;
        authToken: import("zod").ZodOptional<import("zod").ZodString>;
    }, "strip", import("zod").ZodTypeAny, {
        authToken?: string | undefined;
        url: string;
    }, {
        authToken?: string | undefined;
        url: string;
    }>;
}, "strip", import("zod").ZodTypeAny, {
    driver: "turso";
    dbCredentials: {
        authToken?: string | undefined;
        url: string;
    };
}, {
    driver: "turso";
    dbCredentials: {
        authToken?: string | undefined;
        url: string;
    };
}>, import("zod").ZodObject<{
    driver: import("zod").ZodLiteral<"libsql">;
    dbCredentials: import("zod").ZodObject<{
        url: import("zod").ZodString;
    }, "strip", import("zod").ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", import("zod").ZodTypeAny, {
    driver: "libsql";
    dbCredentials: {
        url: string;
    };
}, {
    driver: "libsql";
    dbCredentials: {
        url: string;
    };
}>, import("zod").ZodObject<{
    driver: import("zod").ZodLiteral<"better-sqlite">;
    dbCredentials: import("zod").ZodObject<{
        url: import("zod").ZodString;
    }, "strip", import("zod").ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", import("zod").ZodTypeAny, {
    driver: "better-sqlite";
    dbCredentials: {
        url: string;
    };
}, {
    driver: "better-sqlite";
    dbCredentials: {
        url: string;
    };
}>]>>;
export type SQLitePushConfig = TypeOf<typeof sqliteConfigPushParams>;
export declare const printConfigConnectionIssues: (options: any) => void;
export declare const validateIntrospect: (options: Record<string, any>) => Promise<SQLiteCliConfig>;
export declare const validatePush: (options: Record<string, unknown>) => Promise<SQLitePushConfig>;
export declare const validateGenerate: () => void;
