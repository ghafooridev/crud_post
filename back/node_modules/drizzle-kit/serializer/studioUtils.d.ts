import type { Setup } from "@drizzle-team/studio";
import { Relations } from "drizzle-orm";
import { AnyMySqlTable } from "drizzle-orm/mysql-core";
import { AnyPgTable } from "drizzle-orm/pg-core";
import { AnySQLiteTable } from "drizzle-orm/sqlite-core";
import { MySQLConnectionConfig } from "src/cli/validations/mysql";
import { PgConnectionConfig } from "src/cli/validations/pg";
import { StudioConfigConnections, StudioSqliteConnectionConfig as StudioSQLiteConnectionConfig } from "src/cli/validations/studio";
export declare const preparePgSchema: (path: string | string[]) => Promise<{
    schema: Record<string, Record<string, AnyPgTable<{}>>>;
    relations: Record<string, Relations<string, Record<string, import("drizzle-orm").Relation<string>>>>;
}>;
export declare const prepareMySqlSchema: (path: string | string[]) => Promise<{
    schema: Record<string, Record<string, AnyMySqlTable<{}>>>;
    relations: Record<string, Relations<string, Record<string, import("drizzle-orm").Relation<string>>>>;
}>;
export declare const prepareSQLiteSchema: (path: string | string[]) => Promise<{
    schema: Record<string, Record<string, AnySQLiteTable<{}>>>;
    relations: Record<string, Relations<string, Record<string, import("drizzle-orm").Relation<string>>>>;
}>;
export declare const prepareModels: (path: string | string[]) => Promise<{
    pgSchema: Record<string, AnyPgTable<{}> | Relations<string, Record<string, import("drizzle-orm").Relation<string>>>>;
    mysqlSchema: Record<string, AnyMySqlTable<{}> | Relations<string, Record<string, import("drizzle-orm").Relation<string>>>>;
    sqliteSchema: Record<string, AnySQLiteTable<{}> | Relations<string, Record<string, import("drizzle-orm").Relation<string>>>>;
}>;
export declare const drizzleForPostgres: (connectionConfig: PgConnectionConfig, pgSchema: Record<string, Record<string, AnyPgTable>>, relations: Record<string, Relations>, ts: {
    imports: string;
    declarations: string;
    schemaEntry: string;
}, verbose: boolean) => Promise<Setup>;
export declare const drizzleForMySQL: (config: MySQLConnectionConfig, mysqlSchema: Record<string, Record<string, AnyMySqlTable>>, relations: Record<string, Relations>, ts: {
    imports: string;
    declarations: string;
    schemaEntry: string;
}, verbose: boolean) => Promise<Setup>;
export declare const drizzleForSQLite: (config: StudioSQLiteConnectionConfig, sqliteSchema: Record<string, Record<string, AnySQLiteTable>>, relations: Record<string, Relations>, ts: {
    imports: string;
    declarations: string;
    schemaEntry: string;
}, verbose: boolean) => Promise<Setup>;
export declare const drizzleDb: (drizzleConfig: StudioConfigConnections, models: {
    pgSchema?: Record<string, AnyPgTable | Relations>;
    mysqlSchema?: Record<string, AnyMySqlTable | Relations>;
    sqliteSchema?: Record<string, AnySQLiteTable | Relations>;
}, logger: boolean) => Promise<{
    db: import("drizzle-orm/node-postgres").NodePgDatabase<Record<string, never>>;
    type: "pg";
    schema: Record<string, AnyPgTable<{}> | Relations<string, Record<string, import("drizzle-orm").Relation<string>>>> | undefined;
} | {
    db: import("drizzle-orm/mysql2").MySql2Database<Record<string, never>>;
    type: "mysql";
    schema: Record<string, AnyMySqlTable<{}> | Relations<string, Record<string, import("drizzle-orm").Relation<string>>>> | undefined;
} | {
    db: import("../orm-extenstions/d1-driver/driver").DrizzleD1WranglerDatabase<Record<string, never>>;
    type: "sqlite";
    schema: Record<string, AnySQLiteTable<{}> | Relations<string, Record<string, import("drizzle-orm").Relation<string>>>> | undefined;
} | {
    db: import("drizzle-orm/better-sqlite3").BetterSQLite3Database<Record<string, never>>;
    type: "sqlite";
    schema: Record<string, AnySQLiteTable<{}> | Relations<string, Record<string, import("drizzle-orm").Relation<string>>>> | undefined;
} | {
    db: import("drizzle-orm/libsql").LibSQLDatabase<Record<string, never>>;
    type: "sqlite";
    schema: Record<string, AnySQLiteTable<{}> | Relations<string, Record<string, import("drizzle-orm").Relation<string>>>> | undefined;
}>;
